CSCB58 Project File: Summer 2017

Team Member A
-------------
First Name: Stephen
Last Name: Liu
Student Number: 1003579291
UofT E-mail Address: sb.liu@mail.utoronto.ca


Team Member B
-------------
First Name: Lennard
Last Name: Chan
Student Number: 1003630966
UofT E-mail Address: lennard.chan@mail.utoronto.ca

Team Member C (Optional)
-------------
First Name: Jacqueline
Last Name: Chan
Student Number: 1003150190
UofT E-mail Address: jacquelinee.chan@mail.utoronto.ca

Team Member D (Optional)
-------------
First Name: Youyee
Last Name: Chen
Student Number: 1002938299
UofT E-mail Address: youyee.chen@mail.utoronto.ca

Project Details
---------------
Project Title: B o u n c e
Colour Bounce 

Project Description: 

There is a bouncing ball that changes colours on each bounce. You can 
land on the (static) platforms only of the same colour. 
The colour of the platforms will change randomly, so you must decide on 
which platform to land on carefully.
To land on a platform, you must press the key associated with that 
platform at a certain time.
If the ball falls to the bottom then you lose. You get points the longer 
you bounce.

Video URL:

Code URL (please upload a copy of this file to your repository at the 
end of the project as well, it will
serve as a useful resource for future development):


Proposal
--------

What do you plan to have completed by the end of the first lab session?: 

Draw a static screen of the game. (Drawing ball and platforms using VGA)

What do you plan to have completed by the end of the second lab 
session?: 

Implement module that will randomize the platform and ball colours.

What do you plan to have completed by the end of the third lab session?: 

Implement the animation part of this project (i.e. the bouncing part of 
the ball),
and also the module to keep track of the points of the bouncing ball 
(i.e. when the ball successfully 
lands on a platform, or when it fails).

What is your backup plan if things don’t work out as planned? 

Goal: Try to book the Makerspace boards to make up the lost time.
If this is not possible then at least meet up to try to rework our 
plan/code.

If the backbone of our plan doesn’t work out as planned, we may have to 
turn to similar, alternate ideas.
We will pick rationally according to what we have already completed and 
what is not really working out. 

One possible alternate idea: 

- A ball jump/climb upwards onto available randomly generated platforms 
until the user misses a platform. 
These platforms are not static and new platforms will populate as the 
ball escalates. The higher the ball, the more points.


What hardware will you need beyond the DE2 board 

(be sure to e-mail Brian if it’s anything beyond the basics to make sure 
there’s enough to go around)
- VGA


Motivations
-----------
How does this project relate to the material covered in CSCB58?:

Our project makes use of different kinds of latches, signals for clocks,
counters, memory, many logic gates, finite state machine and generally
most of the material that we learnt in class. From the design of our
code and game, our project conveys the recurring main idea of this course.
This main idea is: taking time to understand (in this case build)
different small components (or modules) is needed to get to the “Final
Destination” (our game).

Why is this project interesting/cool (for CSCB58 students, and for non 
CSCB58 students?):

The layout of our code in the project is intuitive. We have a place
to store values (memory), an updater and data-path (which updates/retrieves
from memory) to regulate what should feed into our VGA adapter. These small
modules interact with each other to display the scores and let the user
play the game. This is interesting, because just by carefully planning
out what each small component contribute to the bigger picture, we
end up with a cool game. And although this game is branched off of the
concepts that we have learned in this course, non CSCB58 will find this
cool because we are taking physical parts of a computer and displaying 
shapes that can move/interact with a user 

Why did you personally choose this project?:
We unanimously decided that we wanted to create a game for our project
mainly because we agreed that it would be fun, especially when we finish,
we get to play it ourselves. Instead of adding on to a game that has 
already been created by a peer, we wanted to create game based off of an 
original idea for this project. Reason being is that we wanted to
see what we can build from scratch with the resources was provided,
and with the intellect that we collectively gathered from taking this
class. 

Attributions
------------
Provide a complete list of any external resources your project used 
(attributions should also be included in your
code).  

We did not copy the code, but we got some ideas on  how to randomize 
from looking at this:

Also our decimal to binary converter module is from this:
http://www.deathbylogic.com/2013/12/binary-to-binary-coded-decimal-bcd-converter/


Updates
-------

Week 1: We got together several times before our lab this week.
Before the lab:
We planned for several days of all the modules we needed in order to make
this game. We planned out all the gritty details so that when we implement the
game or need to make any changes, it would be easy to know how to do so
without making serious mistakes.

By the end of our lab:
We drew the static screen of the game as planned. This included
all 4 platforms, and the ball against the black background. Before the lab,
we wrote the data path and FSM that feeds into the VGA adapter. At first, 
when we tested these modules, nothing was drawn onto the screen. However,
after adjusting the clock, the colours of the platforms, and off by one 
errors, we are able to display a perfect square (as our ball) and the 4
platforms, as planned. Also, we thought we were having trouble at first
with the FSM because it looked like it drew 2 balls instead of the 
desired 1, however we realized that it actually showed that our 
FMS was working because we had an ERASE BALL state and we temporarily set
that state to do that.

For the rest of the lab, we began writing out the code for our memory and 
updater module, as these modules will help us reach our next goal of 
making the platform colours random.

Week 2: We got together several times before our lab this week.
Before our lab:
We were able to make a randomizer module so that we can test it before 
our lab on Thursday. All day Tuesday, we sat in another 
lab class to test out this module. Our randomizer worked for the most part,
but we realized that after playing our game for awhile, the colours did not
seem to be completely random, and sometimes no platforms matched the colour
of the ball at all, making our game endlessly loop. However, we did succeed 
in making sure the platform/ball colours change at the appropriate time. 
We also succeeded in making the ball move up and down - the first step in 
making the ball bounce appropriately. 
By the end of our lab:
We completed our goal of making a randomizer module, but we
still had a member of our group continually improve it because, although 
the colours change each time randomly, we want to reduce the frequency of the 
colour black popping up (as our background is black).
We got started in making the ball move and bounce accordingly
to the user input (we realized that we may have to fix some platform distances
to do so). We also got advice from the TA to make our game 
freeze/restart when the game ends.
Also, we realized that if we have time, we should implement a hi-score
feature.


Week 3: We got together several times before our lab this week.
Before our lab:
By having the modules signal each other as planned 
(some signals act as clocks for other modules),
we were able to get the ball bounce appropriately to the 
user input. We also redid our randomizer, and in this latest revision,
we do not encounter any of our previous problems. 
We further worked on our reset component (i.e. adding a mux)
because we needed to have a game over state. 
Up to this point, everything else is working out smoothly. 

By the end of our lab:
We finished implementing displaying the scores of the game.
We have a hi-score display as well.
We got the ball to move as planned. 
- Our ball bounces accordingly 
- The platforms distance are now fixed
Our randomizer is now fixed
We have a reset/pause/game over state

By the end of the week, as planned, we finished the animation part of
the game and we are satisfied that our game is basically complete.
